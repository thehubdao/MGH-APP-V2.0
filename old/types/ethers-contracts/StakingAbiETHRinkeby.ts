/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace LockedStakingRewards {
  export type PoolStruct = {
    tokenPerShareMultiplier: BigNumberish;
    isTerminated: boolean;
    cycleDuration: BigNumberish;
    startOfDeposit: BigNumberish;
    tokenPerShare: BigNumberish;
  };

  export type PoolStructOutput = [
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenPerShareMultiplier: BigNumber;
    isTerminated: boolean;
    cycleDuration: BigNumber;
    startOfDeposit: BigNumber;
    tokenPerShare: BigNumber;
  };
}

export interface StakingAbiETHRinkebyInterface extends utils.Interface {
  contractName: "StakingAbiETHRinkeby";
  functions: {
    "createPool(uint256,(uint256,bool,uint256,uint256,uint256))": FunctionFragment;
    "depositDuration()": FunctionFragment;
    "getPoolInfo(uint256)": FunctionFragment;
    "getUserTokenAmountAfter(address,uint256)": FunctionFragment;
    "getUserTokenAmountBefore(address,uint256)": FunctionFragment;
    "isTransferPhase(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pool(uint256)": FunctionFragment;
    "receiveApproval(address,uint256,address,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sharesToToken(uint256,uint256)": FunctionFragment;
    "stakeToken()": FunctionFragment;
    "terminatePool(uint256)": FunctionFragment;
    "tokenToShares(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "updateTokenPerShareMultiplier(uint256,uint256)": FunctionFragment;
    "viewUserShares(address,uint256)": FunctionFragment;
    "viewUserTokenAmount(address,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish, LockedStakingRewards.PoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenAmountAfter",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenAmountBefore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "receiveApproval",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharesToToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "terminatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenPerShareMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewUserShares",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewUserTokenAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenAmountAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenAmountBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenPerShareMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUserShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUserTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolKilled(uint256)": EventFragment;
    "PoolUpdated(uint256,uint256,uint256)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "Unstaked(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolKilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PoolKilledEvent = TypedEvent<[BigNumber], { pool: BigNumber }>;

export type PoolKilledEventFilter = TypedEventFilter<PoolKilledEvent>;

export type PoolUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { pool: BigNumber; newDepositStart: BigNumber; newTokenPerShare: BigNumber }
>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { staker: string; pool: BigNumber; amount: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type UnstakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { staker: string; pool: BigNumber; amount: BigNumber }
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface StakingAbiETHRinkeby extends BaseContract {
  contractName: "StakingAbiETHRinkeby";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingAbiETHRinkebyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPool(
      _pool: BigNumberish,
      pool_: LockedStakingRewards.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolInfo(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getUserTokenAmountAfter(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserTokenAmountBefore(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isTransferPhase(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
        tokenPerShareMultiplier: BigNumber;
        isTerminated: boolean;
        cycleDuration: BigNumber;
        startOfDeposit: BigNumber;
        tokenPerShare: BigNumber;
      }
    >;

    receiveApproval(
      _sender: string,
      _amount: BigNumberish,
      _stakeToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharesToToken(
      _sharesAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeToken(overrides?: CallOverrides): Promise<[string]>;

    terminatePool(
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToShares(
      _tokenAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTokenPerShareMultiplier(
      _pool: BigNumberish,
      newTokenPerShareMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewUserShares(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewUserTokenAmount(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _sharesAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createPool(
    _pool: BigNumberish,
    pool_: LockedStakingRewards.PoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolInfo(
    _pool: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getUserTokenAmountAfter(
    _user: string,
    _pool: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTokenAmountBefore(
    _user: string,
    _pool: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isTransferPhase(
    _pool: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
      tokenPerShareMultiplier: BigNumber;
      isTerminated: boolean;
      cycleDuration: BigNumber;
      startOfDeposit: BigNumber;
      tokenPerShare: BigNumber;
    }
  >;

  receiveApproval(
    _sender: string,
    _amount: BigNumberish,
    _stakeToken: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharesToToken(
    _sharesAmount: BigNumberish,
    _pool: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeToken(overrides?: CallOverrides): Promise<string>;

  terminatePool(
    _pool: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToShares(
    _tokenAmount: BigNumberish,
    _pool: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pool: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTokenPerShareMultiplier(
    _pool: BigNumberish,
    newTokenPerShareMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewUserShares(
    _user: string,
    _pool: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewUserTokenAmount(
    _user: string,
    _pool: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _sharesAmount: BigNumberish,
    _pool: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPool(
      _pool: BigNumberish,
      pool_: LockedStakingRewards.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getUserTokenAmountAfter(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokenAmountBefore(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferPhase(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
        tokenPerShareMultiplier: BigNumber;
        isTerminated: boolean;
        cycleDuration: BigNumber;
        startOfDeposit: BigNumber;
        tokenPerShare: BigNumber;
      }
    >;

    receiveApproval(
      _sender: string,
      _amount: BigNumberish,
      _stakeToken: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sharesToToken(
      _sharesAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<string>;

    terminatePool(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenToShares(
      _tokenAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pool: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateTokenPerShareMultiplier(
      _pool: BigNumberish,
      newTokenPerShareMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    viewUserShares(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUserTokenAmount(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _sharesAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PoolKilled(uint256)"(pool?: BigNumberish | null): PoolKilledEventFilter;
    PoolKilled(pool?: BigNumberish | null): PoolKilledEventFilter;

    "PoolUpdated(uint256,uint256,uint256)"(
      pool?: BigNumberish | null,
      newDepositStart?: null,
      newTokenPerShare?: null
    ): PoolUpdatedEventFilter;
    PoolUpdated(
      pool?: BigNumberish | null,
      newDepositStart?: null,
      newTokenPerShare?: null
    ): PoolUpdatedEventFilter;

    "Staked(address,uint256,uint256)"(
      staker?: string | null,
      pool?: BigNumberish | null,
      amount?: null
    ): StakedEventFilter;
    Staked(
      staker?: string | null,
      pool?: BigNumberish | null,
      amount?: null
    ): StakedEventFilter;

    "Unstaked(address,uint256,uint256)"(
      staker?: string | null,
      pool?: BigNumberish | null,
      amount?: null
    ): UnstakedEventFilter;
    Unstaked(
      staker?: string | null,
      pool?: BigNumberish | null,
      amount?: null
    ): UnstakedEventFilter;
  };

  estimateGas: {
    createPool(
      _pool: BigNumberish,
      pool_: LockedStakingRewards.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokenAmountAfter(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokenAmountBefore(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferPhase(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    receiveApproval(
      _sender: string,
      _amount: BigNumberish,
      _stakeToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharesToToken(
      _sharesAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    terminatePool(
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToShares(
      _tokenAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTokenPerShareMultiplier(
      _pool: BigNumberish,
      newTokenPerShareMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewUserShares(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUserTokenAmount(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _sharesAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPool(
      _pool: BigNumberish,
      pool_: LockedStakingRewards.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolInfo(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokenAmountAfter(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokenAmountBefore(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferPhase(
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveApproval(
      _sender: string,
      _amount: BigNumberish,
      _stakeToken: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharesToToken(
      _sharesAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminatePool(
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToShares(
      _tokenAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenPerShareMultiplier(
      _pool: BigNumberish,
      newTokenPerShareMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewUserShares(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewUserTokenAmount(
      _user: string,
      _pool: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _sharesAmount: BigNumberish,
      _pool: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
