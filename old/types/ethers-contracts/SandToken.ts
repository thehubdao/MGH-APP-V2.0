/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SandTokenInterface extends utils.Interface {
  contractName: "SandToken";
  functions: {
    "name()": FunctionFragment;
    "changeExecutionAdmin(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "burnFor(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "approveFor(address,address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "addAllowanceIfNeeded(address,address,uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "isExecutionOperator(address)": FunctionFragment;
    "isSuperOperator(address)": FunctionFragment;
    "setExecutionOperator(address,bool)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "approveAndExecuteWithSpecificGas(address,address,uint256,uint256,bytes)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "setSuperOperator(address,bool)": FunctionFragment;
    "getExecutionAdmin()": FunctionFragment;
    "paidCall(address,uint256,bytes)": FunctionFragment;
    "approveAndCall(address,uint256,bytes)": FunctionFragment;
    "approveAndExecuteWithSpecificGasAndChargeForIt(address,address,uint256,uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "executeWithSpecificGas(address,uint256,bytes)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "transferAndChargeForGas(address,address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeExecutionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveFor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAllowanceIfNeeded",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "isExecutionOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSuperOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveAndExecuteWithSpecificGas",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuperOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paidCall",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAndCall",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAndExecuteWithSpecificGasAndChargeForIt",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithSpecificGas",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndChargeForGas",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeExecutionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approveFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAllowanceIfNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExecutionOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSuperOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAndExecuteWithSpecificGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSuperOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paidCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveAndExecuteWithSpecificGasAndChargeForIt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithSpecificGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAndChargeForGas",
    data: BytesLike
  ): Result;

  events: {
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "SuperOperator(address,bool)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "ExecutionAdminAdminChanged(address,address)": EventFragment;
    "ExecutionOperator(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionAdminAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionOperator"): EventFragment;
}

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type SuperOperatorEvent = TypedEvent<
  [string, boolean],
  { superOperator: string; enabled: boolean }
>;

export type SuperOperatorEventFilter = TypedEventFilter<SuperOperatorEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { oldAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type ExecutionAdminAdminChangedEvent = TypedEvent<
  [string, string],
  { oldAdmin: string; newAdmin: string }
>;

export type ExecutionAdminAdminChangedEventFilter =
  TypedEventFilter<ExecutionAdminAdminChangedEvent>;

export type ExecutionOperatorEvent = TypedEvent<
  [string, boolean],
  { executionOperator: string; enabled: boolean }
>;

export type ExecutionOperatorEventFilter =
  TypedEventFilter<ExecutionOperatorEvent>;

export interface SandToken extends BaseContract {
  contractName: "SandToken";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SandTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    name(overrides?: CallOverrides): Promise<[string]>;

    changeExecutionAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnFor(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveFor(
      owner: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    addAllowanceIfNeeded(
      owner: string,
      spender: string,
      amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExecutionOperator(
      who: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSuperOperator(who: string, overrides?: CallOverrides): Promise<[boolean]>;

    setExecutionOperator(
      executionOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approveAndExecuteWithSpecificGas(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExecutionAdmin(overrides?: CallOverrides): Promise<[string]>;

    paidCall(
      target: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveAndCall(
      target: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveAndExecuteWithSpecificGasAndChargeForIt(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      tokenGasPrice: BigNumberish,
      baseGasCharge: BigNumberish,
      tokenReceiver: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeWithSpecificGas(
      to: string,
      gasLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remaining: BigNumber }>;

    transferAndChargeForGas(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      tokenGasPrice: BigNumberish,
      baseGasCharge: BigNumberish,
      tokenReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  name(overrides?: CallOverrides): Promise<string>;

  changeExecutionAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  burnFor(
    owner: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveFor(
    owner: string,
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  addAllowanceIfNeeded(
    owner: string,
    spender: string,
    amountNeeded: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExecutionOperator(who: string, overrides?: CallOverrides): Promise<boolean>;

  isSuperOperator(who: string, overrides?: CallOverrides): Promise<boolean>;

  setExecutionOperator(
    executionOperator: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  approveAndExecuteWithSpecificGas(
    from: string,
    to: string,
    amount: BigNumberish,
    gasLimit: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSuperOperator(
    superOperator: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExecutionAdmin(overrides?: CallOverrides): Promise<string>;

  paidCall(
    target: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveAndCall(
    target: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveAndExecuteWithSpecificGasAndChargeForIt(
    from: string,
    to: string,
    amount: BigNumberish,
    gasLimit: BigNumberish,
    tokenGasPrice: BigNumberish,
    baseGasCharge: BigNumberish,
    tokenReceiver: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeWithSpecificGas(
    to: string,
    gasLimit: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferAndChargeForGas(
    from: string,
    to: string,
    amount: BigNumberish,
    gasLimit: BigNumberish,
    tokenGasPrice: BigNumberish,
    baseGasCharge: BigNumberish,
    tokenReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    name(overrides?: CallOverrides): Promise<string>;

    changeExecutionAdmin(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    burnFor(
      owner: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveFor(
      owner: string,
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    addAllowanceIfNeeded(
      owner: string,
      spender: string,
      amountNeeded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isExecutionOperator(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSuperOperator(who: string, overrides?: CallOverrides): Promise<boolean>;

    setExecutionOperator(
      executionOperator: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    approveAndExecuteWithSpecificGas(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getExecutionAdmin(overrides?: CallOverrides): Promise<string>;

    paidCall(
      target: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    approveAndCall(
      target: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    approveAndExecuteWithSpecificGasAndChargeForIt(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      tokenGasPrice: BigNumberish,
      baseGasCharge: BigNumberish,
      tokenReceiver: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    executeWithSpecificGas(
      to: string,
      gasLimit: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAndChargeForGas(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      tokenGasPrice: BigNumberish,
      baseGasCharge: BigNumberish,
      tokenReceiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "SuperOperator(address,bool)"(
      superOperator?: null,
      enabled?: null
    ): SuperOperatorEventFilter;
    SuperOperator(
      superOperator?: null,
      enabled?: null
    ): SuperOperatorEventFilter;

    "AdminChanged(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(oldAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    "ExecutionAdminAdminChanged(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): ExecutionAdminAdminChangedEventFilter;
    ExecutionAdminAdminChanged(
      oldAdmin?: null,
      newAdmin?: null
    ): ExecutionAdminAdminChangedEventFilter;

    "ExecutionOperator(address,bool)"(
      executionOperator?: null,
      enabled?: null
    ): ExecutionOperatorEventFilter;
    ExecutionOperator(
      executionOperator?: null,
      enabled?: null
    ): ExecutionOperatorEventFilter;
  };

  estimateGas: {
    name(overrides?: CallOverrides): Promise<BigNumber>;

    changeExecutionAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    burnFor(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveFor(
      owner: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowanceIfNeeded(
      owner: string,
      spender: string,
      amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExecutionOperator(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSuperOperator(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    setExecutionOperator(
      executionOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    approveAndExecuteWithSpecificGas(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExecutionAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    paidCall(
      target: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveAndCall(
      target: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveAndExecuteWithSpecificGasAndChargeForIt(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      tokenGasPrice: BigNumberish,
      baseGasCharge: BigNumberish,
      tokenReceiver: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeWithSpecificGas(
      to: string,
      gasLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAndChargeForGas(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      tokenGasPrice: BigNumberish,
      baseGasCharge: BigNumberish,
      tokenReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeExecutionAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnFor(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveFor(
      owner: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAllowanceIfNeeded(
      owner: string,
      spender: string,
      amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExecutionOperator(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSuperOperator(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExecutionOperator(
      executionOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveAndExecuteWithSpecificGas(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExecutionAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paidCall(
      target: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveAndCall(
      target: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveAndExecuteWithSpecificGasAndChargeForIt(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      tokenGasPrice: BigNumberish,
      baseGasCharge: BigNumberish,
      tokenReceiver: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeWithSpecificGas(
      to: string,
      gasLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAndChargeForGas(
      from: string,
      to: string,
      amount: BigNumberish,
      gasLimit: BigNumberish,
      tokenGasPrice: BigNumberish,
      baseGasCharge: BigNumberish,
      tokenReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
